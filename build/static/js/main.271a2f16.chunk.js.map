{"version":3,"sources":["services/persons.js","components/Contacts.js","components/Search.js","components/AddContact.js","components/Notification.js","components/App.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","put","delete","Contacts","props","persons","map","person","onClick","name","number","Search","value","onChange","AddContact","onSubmit","nameValue","nameOnChange","numberValue","numberOnChange","type","Notification","message","className","class","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","searchTerm","setSearchTerm","notificationMessage","setNotificationMessage","notificationClass","setNotificationClass","useEffect","personService","then","response","data","keyvalue","event","target","preventDefault","newPerson","existingPerson","filter","x","toLocaleLowerCase","toLowerCase","length","window","confirm","setTimeout","catch","error","concat","includes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.271a2f16.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nexport const getAll = () => {\n    return axios.get(baseUrl)\n}\n\nconst create = newObject => {\n    return axios.post(baseUrl, newObject)\n}\n\nconst update = (id, newObject) => {\n    return axios.put(`${baseUrl}/${id}`, newObject)\n}\n\nconst remove = (id) => {\n    return axios.delete(`${baseUrl}/${id}`)\n}\n\n// eslint-disable-next-line\nexport default {\n    getAll: getAll,\n    create: create,\n    update: update,\n    remove: remove\n}","const Contacts = (props) => {\n    return (\n        <ul>\n            {props.persons.map(person =>\n                <li key={person.id}><button onClick={() => props.onClick(person)}>delete</button> {person.name} {person.number}</li>\n            )}\n        </ul>\n    )\n}\n\nexport default Contacts","const Search = (props) => {\n    return (\n        <div>\n            Search name: <input value={props.value} onChange={props.onChange} />\n        </div>\n    )\n}\n\nexport default Search","const AddContact = (props) => {\n    return (\n        <form onSubmit={props.onSubmit}>\n            <div>\n                name: <input value={props.nameValue} onChange={props.nameOnChange} />\n            </div>\n            <div>\n                number: <input value={props.numberValue} onChange={props.numberOnChange} />\n            </div>\n            <div>\n                <button type=\"submit\">add</button>\n            </div>\n        </form>\n    )\n}\n\nexport default AddContact","const Notification = (props) => {\n    if (props.message === null) {\n        return null\n    }\n\n    return (\n        <div className={props.class}>\n            {props.message}\n        </div>\n    )\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport personService from '../services/persons'\nimport Contacts from './Contacts'\nimport Search from './Search'\nimport AddContact from './AddContact'\nimport Notification from './Notification'\n\nconst App = () => {\n    const [persons, setPersons] = useState([])\n    const [newName, setNewName] = useState('')\n    const [newNumber, setNewNumber] = useState('')\n    const [searchTerm, setSearchTerm] = useState('')\n    const [notificationMessage, setNotificationMessage] = useState()\n    const [notificationClass, setNotificationClass] = useState()\n\n    useEffect(() => {\n        personService\n            .getAll()\n            .then(response => {\n                setPersons(response.data)\n            })\n    }, [])\n\n    const addName = (event) => {\n        event.preventDefault()\n\n        const newPerson = {\n            name: newName,\n            number: newNumber\n        }\n\n        const existingPerson = persons.filter(x => x.name.toLocaleLowerCase() === newPerson.name.toLowerCase())\n\n        if (existingPerson.length > 0) {\n            if (window.confirm(`${newName} is already added to phonebook, would you like to replace the old number ${existingPerson[0].number} with the new one?`)) {\n                personService.update(existingPerson[0].id, newPerson)\n                    .then(response => {\n                        setPersons(persons.map(x => x.id !== response.data.id ? x : response.data))\n                        setNewName('')\n                        setNewNumber('')\n                        setNotificationMessage(`Number for ${response.data.name} updated!`)\n                        setNotificationClass(`notification-success`)\n                        setTimeout(() => {\n                            setNotificationMessage(null)\n                            setNotificationClass(null)\n                        }, 5000)\n                    }).catch(error => {\n                        setNotificationMessage(`Something went wrong! Please refresh the page and try again.`)\n                        setNotificationClass(`notification-error`)\n                        setTimeout(() => {\n                            setNotificationMessage(null)\n                            setNotificationClass(null)\n                        }, 5000)\n                    })\n            }\n        } else {\n            personService.create(newPerson)\n                .then(response => {\n                    setPersons(persons.concat(response.data))\n                    setNewName('')\n                    setNewNumber('')\n                    setNotificationMessage(`${response.data.name} was added to the phonebook!`)\n                    setNotificationClass(`notification-success`)\n                    setTimeout(() => {\n                        setNotificationMessage(null)\n                        setNotificationClass(null)\n                    }, 5000)\n                }).catch(error => {\n                    setNotificationMessage(`Something went wrong! Please refresh the page and try again.`)\n                    setNotificationClass(`notification-error`)\n                    setTimeout(() => {\n                        setNotificationMessage(null)\n                        setNotificationClass(null)\n                    }, 5000)\n                })\n        }\n    }\n\n    const handleNameChange = (event) => {\n        setNewName(event.target.value)\n    }\n\n    const handleNumberChange = (event) => {\n        setNewNumber(event.target.value)\n    }\n\n    const handleSearch = (event) => {\n        setSearchTerm(event.target.value)\n    }\n\n    const onClickDelete = (person) => {\n        if (window.confirm(`Are you sure you want to delete ${person.name} from the phonebook?`)) {\n            personService.remove(person.id).then(response => {\n                setPersons(persons.filter(x => x.id !== person.id))\n                setNotificationMessage(`${person.name} was deleted from the phonebook!`)\n                setNotificationClass(`notification-success`)\n                setTimeout(() => {\n                    setNotificationMessage(null)\n                    setNotificationClass(null)\n                }, 5000)\n            }).catch(error => {\n                setNotificationMessage(`Something went wrong! Please refresh the page and try again.`)\n                setNotificationClass(`notification-error`)\n                setTimeout(() => {\n                    setNotificationMessage(null)\n                    setNotificationClass(null)\n                }, 5000)\n            })\n        }\n    }\n\n    const searchResults = () => {\n        return persons.filter(x => x.name.toLowerCase().includes(searchTerm.toLocaleLowerCase()))\n    }\n\n    return (\n        <div>\n            <h1>Phonebook</h1>\n            <Notification message={notificationMessage} class={notificationClass} />\n            <Search keyvalue={searchTerm} onChange={handleSearch} />\n            <h2>Add a new contact</h2>\n            <AddContact onSubmit={addName} nameValue={newName} nameOnChange={handleNameChange} numberValue={newNumber} numberOnChange={handleNumberChange} />\n            <h2>Contacts</h2>\n            <Contacts persons={searchResults()} onClick={onClickDelete} />\n        </div>\n    )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}